import {
  Application,
  Comment,
  CommentTag,
  Context,
  Converter,
  LogLevel,
  ReferenceType,
  Reflection,
  ReflectionKind,
} from 'typedoc';

export function ngxPluginSubscribe(app: Readonly<Application>) {
  const logIt = (text: string, level: LogLevel = LogLevel.Verbose) =>
    app.logger.log(text, level);

  app.converter.on(
    Converter.EVENT_CREATE_DECLARATION,
    (_: Context, rfl: Reflection) => {
      const isOutputDecorator = setOutputDecoratorAsEvent(rfl);
      const isInputDecorator = tagInputDecorator(rfl);

      if (isOutputDecorator) {
        logIt(
          `typedoc-ngx-plugin detected an Angular @Output! Marked the reflection \`${
            rfl.parent?.name ? rfl.parent.name + '.' : ''
          }${rfl.name}\` as an event.`
        );
      }

      if (isInputDecorator) {
        logIt(
          `typedoc-ngx-plugin detected an Angular @Input! Marked the reflection \`${
            rfl.parent?.name ? rfl.parent.name + '.' : ''
          }${rfl.name}\` as a @ComponentInput.`
        );
      }
    }
  );
}

function setOutputDecoratorAsEvent(reflection: Reflection) {
  const outputDecorator = reflection?.decorators?.find(
    (d) =>
      d.name === 'Output' &&
      (d.type as ReferenceType | undefined)?.package === '@angular/core'
  );
  if (outputDecorator == null) {
    return false;
  } else {
    reflection.kind = ReflectionKind.Event;
    return true;
  }
}

function tagInputDecorator(reflection: Reflection) {
  const inputDecorator = reflection?.decorators?.find(
    (d) =>
      d.name === 'Input' &&
      (d.type as ReferenceType | undefined)?.package === '@angular/core'
  );
  if (inputDecorator == null) {
    return false;
  } else {
    if (!reflection.comment) {
      reflection.comment = new Comment(
        'This property is an Angular Component Input. This comment was generated by `typedoc-ngx-plugin`.'
      );
    }
    if (
      reflection.comment.tags
        ?.map((t) => t?.tagName?.toLowerCase() === 'input')
        .some((v) => v === true)
    ) {
      return true;
    }
    reflection.comment.tags?.length
      ? reflection.comment.tags.push(new CommentTag('input'))
      : (reflection.comment.tags = [new CommentTag('input')]);
    return true;
  }
}
